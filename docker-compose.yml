version: '3.8'

services:
  # Bot de Trading
  trading-bot:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: kalmann-trading-bot
    restart: unless-stopped
    network_mode: "host"  # Usar red del host para acceder a Ollama en localhost
    # ports: # No se necesitan con network_mode: host
    #   - "3001:3001"  # Puerto MCP
    #   - "9090:9090"  # Puerto métricas Prometheus
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - MCP_PORT=3001
      # Bybit Configuration
      - BYBIT_API_KEY=${BYBIT_API_KEY}
      - BYBIT_API_SECRET=${BYBIT_API_SECRET}
      - BYBIT_TESTNET=${BYBIT_TESTNET:-true}
      # Ollama AI (con network_mode: host, usamos localhost)
      - OLLAMA_HOST=${OLLAMA_HOST:-http://localhost:11434}
      # Trading Configuration
      - ENABLE_AUTO_TRADING=${ENABLE_AUTO_TRADING:-true}
      - TRADING_SYMBOL=${TRADING_SYMBOL:-BTCUSDT}
      - TRADING_INTERVAL=${TRADING_INTERVAL:-5m}
      # Risk Management
      - MAX_LEVERAGE=${MAX_LEVERAGE:-50}
      - MAX_POSITION_SIZE=${MAX_POSITION_SIZE:-10000000}
      - RISK_PERCENTAGE=${RISK_PERCENTAGE:-1}
      - STOP_LOSS_PERCENTAGE=${STOP_LOSS_PERCENTAGE:-2}
      - TAKE_PROFIT_PERCENTAGE=${TAKE_PROFIT_PERCENTAGE:-4}
      - MAX_DAILY_TRADES=${MAX_DAILY_TRADES:-20}
      - PAPER_TRADING=${PAPER_TRADING:-false}
      # Metrics
      - PROMETHEUS_PORT=9090
    volumes:
      - ./logs:/app/logs
      - trading-data:/app/data
    # networks:  # Deshabilitado porque usamos network_mode: host
    #   - trading-network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Prometheus - Recolector de métricas
  prometheus:
    image: prom/prometheus:latest
    container_name: kalmann-prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"  # Puerto Prometheus UI
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus/alerts.yml:/etc/prometheus/alerts.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - trading-network

  # Grafana - Visualización de métricas
  grafana:
    image: grafana/grafana:latest
    container_name: kalmann-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource,grafana-piechart-panel
      - GF_SERVER_ROOT_URL=http://localhost:3000
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - grafana-data:/var/lib/grafana
    networks:
      - trading-network
    depends_on:
      - prometheus

  # Node Exporter - Métricas del sistema
  node-exporter:
    image: prom/node-exporter:latest
    container_name: kalmann-node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    command:
      - '--path.rootfs=/host'
    volumes:
      - /:/host:ro,rslave
    networks:
      - trading-network

  # Alertmanager - Gestión de alertas (opcional pero recomendado)
  alertmanager:
    image: prom/alertmanager:latest
    container_name: kalmann-alertmanager
    restart: unless-stopped
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager/config.yml:/etc/alertmanager/config.yml
      - alertmanager-data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    networks:
      - trading-network

  # Loki - Almacenamiento de logs
  loki:
    image: grafana/loki:latest
    container_name: kalmann-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki:/etc/loki
      - loki-data:/loki
    command: -config.file=/etc/loki/loki-config.yml
    networks:
      - trading-network

  # Redis - Persistencia de historial y contexto
  redis:
    image: redis:7-alpine
    container_name: kalmann-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Promtail - Recolector de logs para Loki
  promtail:
    image: grafana/promtail:latest
    container_name: kalmann-promtail
    restart: unless-stopped
    volumes:
      - ./logs:/var/log/trading-bot:ro
      - ./monitoring/promtail:/etc/promtail
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command: -config.file=/etc/promtail/promtail-config.yml
    depends_on:
      - loki
    networks:
      - trading-network

networks:
  trading-network:
    driver: bridge

volumes:
  trading-data:
  prometheus-data:
  grafana-data:
  alertmanager-data:
  loki-data:
  redis-data:
